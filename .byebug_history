continue
user_user_url_builders_path(1)
user_user_url_builder2_path(1)
user_user_url_builder_path(1)
user_user_url_builder_path(1,2)
user_user_url_builder_path
user_user_url_builder
continue
params[:profile]
params
params.id
params["id"]
params["od"]
params[:id]
params
continue
params[:id]
params
user.account_summary.default_profile
user.account_summary
user
continue
params[:profile]
params[:profiles]
params
continue
params
continue
params
continue
params.keys
params.methods
params
continue
params
post
_post
params
continue
e.to_s
e.methods
e
continue
result
continue
result
continue
result.to_json
result.to_h
result
continue
@user.ga_credential
@user.ga_credential.expiration_time_millis
@user.ga_credential.expires_at_millis
@user.ga_credential._millis
@user.ga_credential.expires_at
@user.ga_credential.refresh_token
@user.ga_credential.access_token
@user.ga_credential
@user
puts @analytics.authorization ? 'true' : 'false'
@analytics.authorization
continue
@analytics.authorization
continue
puts @analytics.authorization ? 'true' : 'false'
puts @analytics.authorization 'true' && 'false'
puts @analytics.authorization? true && false
@analytics.authorization
continue
self.ga_credential
self.methods.grep /ga_/
self
continue
self.ga_credential
self
continue
authorizer.store_credentials('isaac@adup.com.tw', cred)
continue
authorizer.store_credentials('isaac@adup.com.tw', cred)
cred
continue
authorizer.store_credentials('isaac@adup.com.tw', cred)
request.env["omniauth.auth"].credentials.token
authorizer.get_credentials('isaac@adup.com.tw')
@authorizer.get_credentials('isaac@adup.com.tw')
authorizer
continue
request.env["omniauth.auth"].credentials.expires_at*1000
request.env["omniauth.auth"].credentials.expires_at
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"].credentials.refresh_token
request.env["omniauth.auth"].credentials.token
request.env["omniauth.auth"].credentials
UserRefreshCredentials
require 'googleauth/user_refresh'
UserRefreshCredentials.new()
authorizer.store_credentials('isaac@adup.com.tw', credentials)
authorizer.store_credentials(user_id, credentials)
tokens.token
credentials = {client_id: client_id, access_token: tokens["token"], refresh_token: tokens["refresh_token"], scope: scope, expiration_time_millis: tokens["expires_at"]*1000}
client_id
tokens
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store, 'http://localhost:3000/oauth/ga_callback')
scope = Google::Apis::AnalyticsV3::AUTH_ANALYTICS
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_"})
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
require 'googleauth/stores/redis_token_store'
require 'googleauth'
require 'google/apis/analytics_v3'
tokens = request.env["omniauth.auth"]["credentials"]
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
request.env["omniauth.auth"]["credentials"]
request.env["omniauth.auth"]
continue
analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration).join(','))
analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date).join(','))
analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date).join(','), dimensions: %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration).join(','), sort: %w(ga:date).join(','))
@analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", w(ga:date).join(','), dimensions: %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration).join(','), sort: %w(ga:date).join(','))
analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date), %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration))
analytics.get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date), %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration)
analytics.methods.grep /get/
analytics.methods.grep /gat/
analytics.methods
analytics
analytics..get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date), %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration))
analytics..get_ga_data("ga:94752642", "yesterday", "yesterday", %w(ga:date), %w(ga:sessions ga:users ga:newUsers ga:percentNewSessions ga:sessionDuration ga:avgSessionDuration)
analytics.show_visits
analytics.authorization = authorizer.get_credentials('isaac@adup.com.tw')
authorizer.get_credentials('isaac@adup.com.tw')
authorizer.get_credentials('ga_user_isaac@adup.com.tw')
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store, 'http://localhost:3000/oauth/ga_callback')
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_"})
authorizer.get_credentials('ga_user_isaac@adup.com.tw')
authorizer.get_credentials('isaac@adup.com.tw')
@authorizer.get_credentials('isaac@adup.com.tw')
analytics = Google::Apis::AnalyticsV3::AnalyticsService.new
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store, 'http://localhost:3000/oauth/ga_callback')
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_isaac@adup.com.tw"})
@user
@user = current_user
scope = Google::Apis::AnalyticsV3::AUTH_ANALYTICS
require 'googleauth/stores/redis_token_store'
require 'googleauth'
require 'google/apis/analytics_v3'
token = request.env["omniauth.auth"]["credentials"]
token = request.env["omniauth.auth"]["credentials"]["token"]
continue
token = request.env["omniauth.auth"]["credentials"]["token"]
request.env["omniauth.auth"]["credentials"]["token"]
@token = @auth["credentials"]["token"]
continue
client = new Google_Client();
require 'google-api-client'
require 'google/client'
require 'google'
authorizer = Google::Auth::UserAuthorizer.new
Google::APIClient
Google
client = Google::APIClient.new
require 'google/apis/analytics_v3'
client = Google::APIClient.new
require 'googleauth'
client = Google::APIClient.new
request.env["omniauth.auth"]["credentials"]["token"]
request.env["omniauth.auth"]
continue
request.env["omniauth.auth"]
continue
request.env["omniauth.auth"]
request.env["omniauth.auth"]["credentials"]
continue
request.env["omniauth.auth"]["credentials"]
request.env["omniauth.auth"]
request.env['credentials']
request
request.env["omniauth.auth"]
continue
current_user.sign_in_count
current_user.methods.grep /sign/
current_user.methods.grep /out/
current_user.methods
current_user
continue
current_user
req
params[:code]
continue
current_user.encrypted_password
current_user
request
continue
(Analytics.new).oauth_url
Analytics.oauth_url
Analytics.url
Analytics
@user.account_summary
@user
continue
credentials = authorizer.get_and_store_credentials_from_code( user_id: user_id, code: '4/6gho1qqMevFXX1a-8YyFyyGCjYldTnHqiNx9FAtPGVw', base_url: @@OOB_URI)
        base_url: @@OOB_URI)
        code: '4/6gho1qqMevFXX1a-8YyFyyGCjYldTnHqiNx9FAtPGVw',
        user_id: user_id,
credentials = authorizer.get_and_store_credentials_from_code(
continue
request.env["omniauth.auth"].class
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"]
continue
Google::Apis::AnalyticsV3.module_eval
Google::Apis::AnalyticsV3.include
Google::Apis::AnalyticsV3.methods
Google::Apis::AnalyticsV3
Google::Apis::AnalyticsV3::
Google::Apis::AnalyticsV3
Analytics
Analytics.inspect 
Analytics.local_variables
Analytics.methods
Analytics::AUTH_PROFILE
Analytics::AUTH_PROFILES
Analytics::AUTH_ANALYTICS
analytics = Analytics::AnalyticsService.new
Analytics = Google::Apis::AnalyticsV3
a=Analytics::AnalyticsService.new
require 'googleauth/stores/redis_token_store'
require 'googleauth'
require 'google/apis/analytics_v3'
params[:code]
continue
credentials = authorizer.get_and_store_credentials_from_code( user_id: "isaac@adup.com.tw", code: "4/qmYfeC_mozW5pqTjOSqlYpwSAw56dSmqsB_4NNHh7gc", base_url: "http://localhost:3000")
credentials = authorizer.get_and_store_credentials_from_code( user_id: isaac@adup.com.tw, code: "4/qmYfeC_mozW5pqTjOSqlYpwSAw56dSmqsB_4NNHh7gc", base_url: "http://localhost:3000")
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_"})
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
require 'googleauth/stores/redis_token_store'
require 'googleauth'
scope = [Analytics::AUTH_ANALYTICS]
scope = [@@Analytics::AUTH_ANALYTICS]
Analytics = Google::Apis::AnalyticsV3
require 'google/apis/analytics_v3'
params[:code]
continue
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"]
request
request.class
request.grep /code/
request
params
credentials = authorizer.get_and_store_credentials_from_code(user_id: "isaac@adup.com.tw", code: "4/5y29wW7YMKToCroo8HR9TQbkNVmVBpkD0Sz1hUX1Rv4", base_url: "http://localhost:3000/users/auth/google_oauth2/callback")
authorizer = Google::Auth::UserAuthorizer.new(client_id, a::AUTH_ANALYTICS, token_store)
a = Google::Apis::AnalyticsV3
require 'google/apis/analytics_v3'
a = Google::Apis::AnalyticsV3
