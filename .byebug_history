continue
token = request.env["omniauth.auth"]["credentials"]["token"]
request.env["omniauth.auth"]["credentials"]["token"]
@token = @auth["credentials"]["token"]
continue
client = new Google_Client();
require 'google-api-client'
require 'google/client'
require 'google'
authorizer = Google::Auth::UserAuthorizer.new
Google::APIClient
Google
client = Google::APIClient.new
require 'google/apis/analytics_v3'
client = Google::APIClient.new
require 'googleauth'
client = Google::APIClient.new
request.env["omniauth.auth"]["credentials"]["token"]
request.env["omniauth.auth"]
continue
request.env["omniauth.auth"]
continue
request.env["omniauth.auth"]
request.env["omniauth.auth"]["credentials"]
continue
request.env["omniauth.auth"]["credentials"]
request.env["omniauth.auth"]
request.env['credentials']
request
request.env["omniauth.auth"]
continue
current_user.sign_in_count
current_user.methods.grep /sign/
current_user.methods.grep /out/
current_user.methods
current_user
continue
current_user
req
params[:code]
continue
current_user.encrypted_password
current_user
request
continue
(Analytics.new).oauth_url
Analytics.oauth_url
Analytics.url
Analytics
@user.account_summary
@user
continue
credentials = authorizer.get_and_store_credentials_from_code( user_id: user_id, code: '4/6gho1qqMevFXX1a-8YyFyyGCjYldTnHqiNx9FAtPGVw', base_url: @@OOB_URI)
        base_url: @@OOB_URI)
        code: '4/6gho1qqMevFXX1a-8YyFyyGCjYldTnHqiNx9FAtPGVw',
        user_id: user_id,
credentials = authorizer.get_and_store_credentials_from_code(
continue
request.env["omniauth.auth"].class
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"]
continue
Google::Apis::AnalyticsV3.module_eval
Google::Apis::AnalyticsV3.include
Google::Apis::AnalyticsV3.methods
Google::Apis::AnalyticsV3
Google::Apis::AnalyticsV3::
Google::Apis::AnalyticsV3
Analytics
Analytics.inspect 
Analytics.local_variables
Analytics.methods
Analytics::AUTH_PROFILE
Analytics::AUTH_PROFILES
Analytics::AUTH_ANALYTICS
analytics = Analytics::AnalyticsService.new
Analytics = Google::Apis::AnalyticsV3
a=Analytics::AnalyticsService.new
require 'googleauth/stores/redis_token_store'
require 'googleauth'
require 'google/apis/analytics_v3'
params[:code]
continue
credentials = authorizer.get_and_store_credentials_from_code( user_id: "isaac@adup.com.tw", code: "4/qmYfeC_mozW5pqTjOSqlYpwSAw56dSmqsB_4NNHh7gc", base_url: "http://localhost:3000")
credentials = authorizer.get_and_store_credentials_from_code( user_id: isaac@adup.com.tw, code: "4/qmYfeC_mozW5pqTjOSqlYpwSAw56dSmqsB_4NNHh7gc", base_url: "http://localhost:3000")
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_"})
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
require 'googleauth/stores/redis_token_store'
require 'googleauth'
scope = [Analytics::AUTH_ANALYTICS]
scope = [@@Analytics::AUTH_ANALYTICS]
Analytics = Google::Apis::AnalyticsV3
require 'google/apis/analytics_v3'
params[:code]
continue
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"]
request
request.class
request.grep /code/
request
params
credentials = authorizer.get_and_store_credentials_from_code(user_id: "isaac@adup.com.tw", code: "4/5y29wW7YMKToCroo8HR9TQbkNVmVBpkD0Sz1hUX1Rv4", base_url: "http://localhost:3000/users/auth/google_oauth2/callback")
authorizer = Google::Auth::UserAuthorizer.new(client_id, a::AUTH_ANALYTICS, token_store)
a = Google::Apis::AnalyticsV3
require 'google/apis/analytics_v3'
a = Google::Apis::AnalyticsV3
authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
token_store = Google::Auth::Stores::RedisTokenStore.new({redis: 'localhost', prefix: "ga_user_"})
@user
client_id = Google::Auth::ClientId.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'])
require 'googleauth/stores/redis_token_store'
# require 'googleauth/stores/file_token_store'
require 'googleauth'
 Google::Auth::Stores::RedisTokenStore
session[:code]
params[:code]
continue
current_user.account_summary
current_user
continue
current_user.account_summary
current_user
continue
@code
credentials = authorizer.get_and_store_credentials_from_code( user_id: user_id, code: @code, base_url: @@OOB_URI)
continue
credentials = authorizer.get_and_store_credentials_from_code( user_id: user_id, code: @code, base_url: @@OOB_URI)
continue
credentials
continue
credentials
credentials = authorizer.get_and_store_credentials_from_code( user_id: user_id, code: @code, base_url: @@OOB_URI)
@code
continue
credentials
continue
credentials
continue
@code
continue
@code
continue
params[:code]
continue
@code
continue
code
continue
sessions
Analytics
self.where(user: user).size
self.where(user: user)
self
continue
self
super
user
account_summary
this
continue
user_signed_in?
user.sigined?
current_user
continue
current_user
continue
session[:code]
continue
session[:code]
session[:code]=params[:code]
session
params[:code]
params.code
params
session
continue
Google::APIClient::ClientSecrets
Google.methods
Google.class
Google.to_s
Google
Google::APIClient
Google
require 'google/apis/calendar_v3'
Google
continue
Google
 Google::APIClient
request.env["rack.request.query_hash"]["code"]
params[:code]
continue
request.env["omniauth.auth"].credentials.token
request.env["omniauth.auth"].credentials
request.env["omniauth.auth"]
continue
request.env.keys
request.env['omniauth.auth']
request.env['omniauth.params']
request.env['omniauth.origin']
request.env['omniauth.strategy'].methods
request.env['omniauth.strategy'].client.methods
request.env['omniauth.strategy'].client
request.env['omniauth.strategy'].access_token
request.env['omniauth.strategy'].methods
request.env['omniauth.strategy']
request.env['action_dispatch.http_auth_salt']
request.env.action_dispatch.http_auth_salt
request.env.keys.grep /auth/
request.env.keys
request.env
continue
access_token = client.auth_code.get_token(auth_code, :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback')
client = OAuth2::Client.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'], { :authorize_url => 'https://accounts.google.com/o/oauth2/auth', :token_url => 'https://accounts.google.com/o/oauth2/token' })
continue
access_token = client.auth_code.get_token(auth_code, :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback')
client = OAuth2::Client.new(ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'], { :authorize_url => 'https://accounts.google.com/o/oauth2/auth', :token_url => 'https://accounts.google.com/o/oauth2/token' })
ENV['LEGATO_OAUTH_CLIENT_ID']
access_token = client.auth_code.get_token(auth_code, :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback')
client.auth_code.authorize_url({ :scope => 'https://www.googleapis.com/auth/analytics.readonly', :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback', :access_type => 'offline' })
client.auth_code.authorize_url({ :scope => 'https://www.googleapis.com/auth/analytics.readonly', :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback', :access_type => 'offline' })'
    client = OAuth2::Client.new(ENV['LEGATO_OAUTH_CLIENT_ID'], ENV['LEGATO_OAUTH_SECRET_KEY'], { :authorize_url => 'https://accounts.google.com/o/oauth2/auth', :token_url => 'https://accounts.google.com/o/oauth2/token' })
continue
response_json = access_token.get('https://www.googleapis.com/analytics/v3/management/accounts').body
access_token = OAuth2::AccessToken.from_hash client, {:access_token => '4/vvMqrR2IDumBpsCxieszZWxF2ZxFA8HOSGpPAse0k5E#'}
response_json = access_token.get('https://www.googleapis.com/analytics/v3/management/accounts').body
access_token = OAuth2::AccessToken.from_hash client, {:access_token => token}
client.auth_code.authorize_url({ :scope => 'https://www.googleapis.com/auth/analytics.readonly', :redirect_uri => 'http://localhost:3000/users/auth/google_oauth2/callback', :access_type => 'offline' })
client = OAuth2::Client.new(ENV['LEGATO_OAUTH_CLIENT_ID'], ENV['LEGATO_OAUTH_SECRET_KEY'], { :authorize_url => 'https://accounts.google.com/o/oauth2/auth', :token_url => 'https://accounts.google.com/o/oauth2/token' })
  :token_url => 'https://accounts.google.com/o/oauth2/token'
  :authorize_url => 'https://accounts.google.com/o/oauth2/auth',
client = OAuth2::Client.new(ENV['LEGATO_OAUTH_CLIENT_ID'], ENV['LEGATO_OAUTH_SECRET_KEY'], {
token = auth_code
auth_code
continue
access_token.class
access_token
continue
session[:auth_code]
continue
request.env["rack.request.query_hash"]["code"]
request.env["rack.request.query_hash"]
request.env["omniauth.code"]
request.env["omniauth"]
request.env
continue
request.env["omniauth.auth"]
env["omniauth.auth"]
access_token.credentials
access_token.info
access_token.uid
access_token.provider
access_token.keys
access_token
continue
